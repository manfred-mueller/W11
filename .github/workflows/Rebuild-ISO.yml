name: Build Custom Windows 11 ISO (Windows Runner, oscdimg via Chocolatey)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      enable_25h2:
        description: "Integrate 25H2 enablement package (KB5054156) via SetupComplete?"
        required: false
        default: "true"
      ekb_raw_url:
        description: "Raw URL to Windows11.0-KB5054156-x64.msu"
        required: false
        default: "https://raw.githubusercontent.com/LLuna-a/Windows-11-KB5054156-Update-Package/main/Windows11.0-KB5054156-x64.msu"
      ekb_sha256:
        description: "Expected SHA256 of the MSU (leave empty to skip strict verification)"
        required: false
        default: ""

permissions:
  contents: write

env:
  ISO_NAME: windows-11-25h2.iso
  ONEDRIVE_REMOTE: ${{ secrets.ONEDRIVE_REMOTE || 'OneDrive' }}
  ONEDRIVE_PATH: ${{ secrets.ONEDRIVE_PATH || 'W11-Releases' }}
  RCLONE_CONFIG_BASE64: ${{ secrets.RCLONE_CONFIG_BASE64 }}

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tools (oscdimg from ADK, 7zip, rclone)
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          choco install windows-adk-oscdimg -y --no-progress
          choco install 7zip -y --no-progress
          choco install rclone -y --no-progress

          # Finde den effektiven oscdimg.exe Pfad (Chocolatey legt i.d.R. einen Shim in C:\ProgramData\chocolatey\bin)
          $osc = (Get-Command oscdimg.exe -ErrorAction Stop).Source
          "OSCDIMG=$osc" | Out-File -FilePath $env:GITHUB_ENV -Append

          & "$Env:ProgramFiles\7-Zip\7z.exe" | Select-Object -First 1 | Out-Null
          rclone version | Out-Null

      - name: Download Windows 10 ISO (German)
        shell: powershell
        run: |
          curl -L -o Win10.iso "https://archive.it-bachmann.de/iso/windows/desktop/10/19041.208.Vibranium-X64-DE-CLIENTPRO%20.ISO"

      - name: Download Windows 11 ISO (German)
        shell: powershell
        run: |
          curl -L -o Win11.iso "https://archive.it-bachmann.de/iso/windows/desktop/11/26100.1.Germanium-X64-DE-XXL-SUPER-MULTI.ISO"

      - name: Extract ISOs
        shell: powershell
        run: |
          & "$Env:ProgramFiles\7-Zip\7z.exe" x -y Win10.iso -oWin10_Extracted | Out-Null
          & "$Env:ProgramFiles\7-Zip\7z.exe" x -y Win11.iso -oWin11_Extracted | Out-Null

      - name: Replace install.wim (no split; UDF handles >4GB)
        shell: powershell
        run: |
          $src = Get-Item -ErrorAction Stop Win11_Extracted\sources\install.wim
          Copy-Item $src.FullName Win10_Extracted\sources\install.wim -Force

      # === Optional: 25H2 Enablement via SetupComplete (KB5054156) ===
      - name: Prepare $OEM$ Scripts directory
        if: ${{ github.event.inputs.enable_25h2 == 'true' }}
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path "Win10_Extracted\sources\$OEM$\$$\Setup\Scripts" | Out-Null

      - name: Download 25H2 Enablement MSU
        if: ${{ github.event.inputs.enable_25h2 == 'true' }}
        shell: powershell
        run: |
          $oem = "Win10_Extracted\sources\$OEM$\$$\Setup\Scripts"
          $url = "${{ github.event.inputs.ekb_raw_url }}"
          $out = Join-Path $oem "Windows11.0-KB5054156-x64.msu"
          curl -L -o $out $url
          Get-Item $out | Format-List Name,Length,FullName

      - name: Verify MSU SHA256 (strict if provided)
        if: ${{ github.event.inputs.enable_25h2 == 'true' }}
        shell: powershell
        run: |
          $oem = "Win10_Extracted\sources\$OEM$\$$\Setup\Scripts"
          $file = Join-Path $oem "Windows11.0-KB5054156-x64.msu"
          $hash = (Get-FileHash $file -Algorithm SHA256).Hash.ToLower()
          Write-Host "Computed SHA256: $hash"
          $exp = "${{ github.event.inputs.ekb_sha256 }}"
          if ($exp -and $exp.Trim() -ne "" -and ($hash -ne $exp.ToLower())) {
            throw "SHA256 mismatch: expected $exp but got $hash"
          }

      - name: Write SetupComplete.cmd
        if: ${{ github.event.inputs.enable_25h2 == 'true' }}
        shell: powershell
        run: |
          $oem = "Win10_Extracted\sources\$OEM$\$$\Setup\Scripts"
          @'
          @echo off
          setlocal EnableDelayedExpansion
          set LOG=%WINDIR%\Temp\25H2_EKB.log
          echo [%date% %time%] SetupComplete start >> "%LOG%"
          set MSU=%~dp0Windows11.0-KB5054156-x64.msu
          if exist "%MSU%" (
            echo [%date% %time%] Installing EKB: %MSU% >> "%LOG%"
            wusa.exe "%MSU%" /quiet /norestart >> "%LOG%" 2>&1
            echo [%date% %time%] wusa exitcode: !errorlevel! >> "%LOG%"
          ) else (
            echo [%date% %time%] EKB MSU not found in %~dp0 >> "%LOG%"
          )
          exit /b 0
          '@ | Set-Content -Path (Join-Path $oem "SetupComplete.cmd") -Encoding ASCII

      - name: Build ISO with oscdimg (UDF + ISO9660, BIOS+UEFI)
        shell: powershell
        run: |
          $uefi = "efi\microsoft\boot\efisys.bin"
          if (-not (Test-Path "Win10_Extracted\$uefi")) {
            $uefi = "efi\microsoft\boot\efisys_noprompt.bin"
          }
          if (-not (Test-Path "Win10_Extracted\$uefi")) {
            throw "UEFI boot image not found (efisys*.bin)"
          }
          if (-not (Test-Path "Win10_Extracted\boot\etfsboot.com")) {
            throw "BIOS boot image not found (boot\etfsboot.com)"
          }

          & "$env:OSCDIMG" -m -o -u2 -udfver102 `
            -bootdata:2#p0,e,bWin10_Extracted\boot\etfsboot.com#pEF,e,bWin10_Extracted\$uefi `
            Win10_Extracted $env:ISO_NAME

      - name: Compute ISO SHA256
        id: sha256
        shell: powershell
        run: |
          $h = (Get-FileHash $env:ISO_NAME -Algorithm SHA256).Hash.ToLower()
          "$h $($env:ISO_NAME)" | Out-File "$env:ISO_NAME.sha256" -Encoding ascii
          "iso_sha256=$h" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Configure rclone (from base64 secret)
        if: ${{ env.RCLONE_CONFIG_BASE64 != '' }}
        shell: powershell
        run: |
          $cfgDir = "$env:APPDATA\rclone"
          New-Item -ItemType Directory -Force -Path $cfgDir | Out-Null
          $bytes = [Convert]::FromBase64String($env:RCLONE_CONFIG_BASE64)
          [IO.File]::WriteAllBytes((Join-Path $cfgDir 'rclone.conf'), $bytes)
          rclone config file

      - name: Upload ISO + SHA256 to OneDrive and create share link
        id: upload
        shell: powershell
        env:
          RCLONE_CONFIG: ${{ env.RCLONE_CONFIG }} # optional alternative to BASE64
        run: |
          $target = "${{ env.ONEDRIVE_REMOTE }}:${{ env.ONEDRIVE_PATH }}/$(Get-Date -Format 'yyyy-MM-dd')-run-${{ github.run_number }}"
          rclone mkdir $target | Out-Null
          rclone copy "$env:ISO_NAME" $target --onedrive-chunk-size 100M --progress=false
          rclone copy "$env:ISO_NAME.sha256" $target --progress=false
          $link = (rclone link "$target/$env:ISO_NAME" 2>$null)
          if (-not $link) { $link = "" }
          "link=$link" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Create GitHub Release (no ISO asset, link to OneDrive)
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ github.run_number }}"
          name: "Custom Windows 11 ISO ($(Get-Date -Format 'yyyy-MM-dd') #${{ github.run_number }})"
          body: |
            Built on Windows with official oscdimg (UDF + ISO9660; BIOS + UEFI).
            - ISO SHA256: ${{ env.iso_sha256 }}
            **OneDrive (full ISO):** [${{ env.ISO_NAME }}](${{ steps.upload.outputs.link }})
            Verify locally:
            ```powershell
            Get-FileHash .\${{ env.ISO_NAME }} -Algorithm SHA256
            ```
