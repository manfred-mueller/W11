name: Build Custom Windows ISO

on:
  push:
    branches:
      -main
  workflow_dispatch:
    inputs:
      enable_25h2:
        description: "Integrate 25H2 enablement package (KB5054156) via SetupComplete?"
        required: false
        default: "true"
      ekb_raw_url:
        description: "Raw URL to Windows11.0-KB5054156-x64.msu"
        required: false
        default: "https://raw.githubusercontent.com/LLuna-a/Windows-11-KB5054156-Update-Package/main/Windows11.0-KB5054156-x64.msu"
      ekb_sha256:
        description: "Expected SHA256 of the MSU (leave empty to skip strict verification)"
        required: false
        default: ""

permissions:
  contents: write

env:
  ISO_NAME: custom_win11_installer.iso
  ONEDRIVE_REMOTE: ${{ secrets.ONEDRIVE_REMOTE || 'OneDrive' }}
  ONEDRIVE_PATH:   ${{ secrets.ONEDRIVE_PATH   || 'W11-Releases' }}

jobs:
  build:
    runs-on: ubuntu-latest
    name: Create a Win11 bootable ISO with Win10 Setup (OneDrive upload)

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          set -euxo pipefail
          sudo apt update
          sudo apt install -y p7zip-full wget xorriso dos2unix rclone

      - name: Download Windows 10 ISO (German)
        run: |
          wget -O Win10.iso "https://archive.it-bachmann.de/iso/windows/desktop/10/19041.208.Vibranium-X64-DE-CLIENTPRO%20.ISO"

      - name: Download Windows 11 ISO (German)
        run: |
          wget -O Win11.iso "https://archive.it-bachmann.de/iso/windows/desktop/11/26100.1.Germanium-X64-DE-XXL-SUPER-MULTI.ISO"

      - name: Extract ISOs
        run: |
          set -euxo pipefail
          mkdir -p Win10_Extracted Win11_Extracted
          7z x -y Win10.iso -oWin10_Extracted
          7z x -y Win11.iso -oWin11_Extracted

      - name: Replace install.wim
        run: |
          set -euxo pipefail
          src_wim=$(find Win11_Extracted -type f -name "install.wim" | head -n 1)
          dest_dir="Win10_Extracted/sources"
          if [ -f "$src_wim" ]; then
            cp -f "$src_wim" "$dest_dir/install.wim"
          else
            echo "install.wim not found in Win11 ISO."
            exit 1
          fi

      # === Optional: 25H2 Enablement via SetupComplete (KB5054156) ===
      - name: Prepare $OEM$ Scripts directory
        if: ${{ github.event.inputs.enable_25h2 == 'true' }}
        run: mkdir -p "Win10_Extracted/sources/\$OEM\$/\$\$/Setup/Scripts"

      - name: Download 25H2 Enablement MSU
        if: ${{ github.event.inputs.enable_25h2 == 'true' }}
        run: |
          oemdir='Win10_Extracted/sources/$OEM$/$$/Setup/Scripts'
          url='${{ github.event.inputs.ekb_raw_url }}'
          out="$oemdir/Windows11.0-KB5054156-x64.msu"
          wget -O "$out" "$url"
          ls -lh "$out"

      - name: Verify MSU SHA256 (strict if provided)
        if: ${{ github.event.inputs.enable_25h2 == 'true' }}
        run: |
          oemdir='Win10_Extracted/sources/$OEM$/$$/Setup/Scripts'
          file="$oemdir/Windows11.0-KB5054156-x64.msu"
          echo "Computed SHA256:"
          sha256sum "$file"
          if [ -n "${{ github.event.inputs.ekb_sha256 }}" ]; then
            exp='${{ github.event.inputs.ekb_sha256 }}'
            got=$(sha256sum "$file" | awk '{print $1}')
            if [ "$got" != "$exp" ]; then
              echo "ERROR: SHA256 mismatch!"
              exit 1
            fi
          fi

      - name: Write SetupComplete.cmd
        if: ${{ github.event.inputs.enable_25h2 == 'true' }}
        run: |
          oemdir='Win10_Extracted/sources/$OEM$/$$/Setup/Scripts'
          cat > "$oemdir/SetupComplete.cmd" << 'EOF'
          @echo off
          set LOG=%WINDIR%\Temp\25H2_EKB.log
          echo [%date% %time%] SetupComplete start >> "%LOG%"

          set MSU=%~dp0Windows11.0-KB5054156-x64.msu
          if exist "%MSU%" (
            echo [%date% %time%] Installing EKB: %MSU% >> "%LOG%"
            wusa.exe "%MSU%" /quiet /norestart >> "%LOG%" 2>&1
            echo [%date% %time%] wusa exitcode: !errorlevel! >> "%LOG%"
          ) else (
            echo [%date% %time%] EKB MSU not found in %~dp0 >> "%LOG%"
          )
          exit /b 0
          EOF
          unix2dos "$oemdir/SetupComplete.cmd" || true

      - name: Rebuild ISO using xorriso (BIOS + UEFI, multi-extent OK)
        run: |
          set -euxo pipefail
          pushd Win10_Extracted
          UEFI_IMG="efi/microsoft/boot/efisys.bin"
          if [ ! -f "$UEFI_IMG" ]; then
            UEFI_IMG="efi/microsoft/boot/efisys_noprompt.bin"
          fi
          [ -f "$UEFI_IMG" ] || { echo "UEFI boot image missing"; exit 1; }
          [ -f "boot/etfsboot.com" ] || { echo "BIOS boot image missing"; exit 1; }

          xorriso -as mkisofs \
            -iso-level 3 \
            -J -joliet-long \
            -relaxed-filenames \
            -volid "CUSTOM_WIN11" \
            -b boot/etfsboot.com \
              -no-emul-boot -boot-load-size 8 -boot-info-table \
            -eltorito-alt-boot \
            -e "$UEFI_IMG" \
              -no-emul-boot \
            -o ../${ISO_NAME} \
            .
          popd

      - name: Compute ISO SHA256
        id: sha256
        run: |
          HASH=$(sha256sum "${ISO_NAME}" | awk '{print $1}')
          echo "iso_sha256=$HASH" >> $GITHUB_ENV
          echo "ISO SHA256: $HASH"
          echo "${HASH}  ${ISO_NAME}" > "${ISO_NAME}.sha256"

      # === OneDrive: Config aus Secret herstellen & Upload ===
      - name: Restore rclone config
        env:
          RCLONE_CONFIG_BASE64: ${{ secrets.RCLONE_CONFIG_BASE64 }}
        run: |
          set -euxo pipefail
          mkdir -p ~/.config/rclone
          if [ -z "${RCLONE_CONFIG_BASE64:-}" ]; then
            echo "RCLONE_CONFIG_BASE64 secret is missing"; exit 1
          fi
          echo "$RCLONE_CONFIG_BASE64" | base64 -d > ~/.config/rclone/rclone.conf
          chmod 600 ~/.config/rclone/rclone.conf
          rclone version

      - name: Upload ISO + SHA256 to OneDrive and create share link
        run: |
          set -euxo pipefail
          TARGET="${ONEDRIVE_REMOTE}:${ONEDRIVE_PATH}/$(date +'%Y-%m-%d')-run-${{ github.run_number }}"
          echo "Uploading to $TARGET"
          rclone copy "${ISO_NAME}" "${TARGET}" --onedrive-chunk-size 100M --progress=false
          rclone copy "${ISO_NAME}.sha256" "${TARGET}" --progress=false
          LINK=$(rclone link "${TARGET}/${ISO_NAME}")
          echo "onedrive_link=$LINK" >> $GITHUB_ENV
          echo "OneDrive link: $LINK"

      - name: Create GitHub Release (no ISO asset, link to OneDrive)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ github.run_number }}"
          name: "Custom Windows 11 ISO ($(date +'%Y-%m-%d') #${{ github.run_number }})"
          body: |
            Automated build of custom Windows 11 installer.

            - 25H2 eKB integrated: ${{ github.event.inputs.enable_25h2 }}
            - eKB URL: ${{ github.event.inputs.ekb_raw_url }}
            - MSU SHA256 enforced: ${{ github.event.inputs.ekb_sha256 != '' }}
            - ISO SHA256: ${{ env.iso_sha256 }}

            ðŸ”— **OneDrive (full ISO):**
            ${{ env.onedrive_link }}

            Verify locally:
            ```bash
            sha256sum -c ${ISO_NAME}.sha256
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
